[build-system]
requires = ["scikit-build-core >=0.4.3", "nanobind >=1.3.2,<2.0.0"]
build-backend = "scikit_build_core.build"

[project]
name = "sparse_dot_topn"
version = "1.1.2"
description = "This package boosts a sparse matrix multiplication followed by selecting the top-n multiplication"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    {name = "ING Analytics Wholesale Banking", email = "wbaa@ing.com"},
]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Operating System :: OS Independent",
]
dependencies = [
    "numpy>=1.18.0",
    "scipy>=1.4.1",
    "psutil",
]

[project.optional-dependencies]
test = ["pytest>=4.0.2"]

[project.urls]
Homepage = "https://github.com/ing-bank/sparse_dot_topn"


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.4"

# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

sdist.include = [
  "src/sparse_dot_topn",
  "src/sparse_dot_topn_core",
  "CMakeLists.txt",
]

# Build stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"

[tool.scikit-build.cmake.define]
CMAKE_OSX_DEPLOYMENT_TARGET="12.0"
SDTN_CPP_STANDARD = "17"
SDTN_ENABLE_DEVMODE = false
SDTN_ENABLE_DEBUG = false
SDTN_ENABLE_OPENMP = false
SDTN_DISABLE_OPENMP = false
SDTN_ENABLE_ARCH_FLAGS = true

[tool.cibuildwheel]
archs = ["auto64"]
skip = ["*-win32", "*-manylinux_i686", "*-musllinux_x86_64"]
build = ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]

# make sure to build generic wheels
environment = {CMAKE_ARGS="-DSDTN_ENABLE_ARCH_FLAGS=OFF -DSDTN_DISABLE_OPENMP=ON"}

# Run pytest to ensure that the package was correctly built
test-command = "pytest {project}/tests"
test-requires = "pytest"
# Skip trying to test arm64 builds on Intel Macs
test-skip = "*-macosx_arm64 *-macosx_universal2:arm64"

# Necessary to see build output from the actual compilation
build-verbosity = 1

[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]
# Needed for full C++17 support
environment = { MACOSX_DEPLOYMENT_TARGET = "12.0", CMAKE_ARGS="-DSDTN_ENABLE_ARCH_FLAGS=OFF -DSDTN_DISABLE_OPENMP=ON" }
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"

[tool.ruff]
extend-select = [
    "E", # pyflakes `E`
    "W", # pyflakes `W`
    "I", # isort
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "D212", # pydocstyle
    "D411", # pydocstyle
    "C4",  # flake8-comprehensions
    "EM", # flake8-errmsg
    "FA", # flake8-future-annotations
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TD002", # flake8-todos
    "PL", # pylint
    "PERF", # perflint
    "FURB", # refurb
]
target-version = "py38"
line-length = 120
select = [
  # Enable Pyflakes `E`, `F` and `W` codes
  "F",
  # pytest
  "PT",
  # numpy
  "NPY",
  # import conventions
  "ICN",
  # prints
  "T20",
  # quotes
  "Q",
  # ruff-specific rules
  "RUF",
  # logging format
  "G",
  # pydocstyle
  "D",
  # annotation with autofix
  "ANN204",
  # error messages
  "EM",
  # raise
  "RSE",
  # flynt
  "FLY",
]

ignore = [
  "E501", # line length
  "PLR0913", # too many arguments
  "PLR2004", # magic value
  "PLR0912", # too many branches
  "PLR0915", # too many statements
  "PLR0911", # too many return statements
  "PLR6301", # method could be function/staticmethod
  # Only lint existing docstrings
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  # period not required
  "D400",
  "D415",
  # newline not required
  "D205",
  # address later
  "PLW2901",
  "PLC1901"
]

[tool.ruff.flake8-copyright]
notice-rgx = """(?mis)Copyright \\(c\\) 2023 ING Analytics Wholesale Banking.+"""

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "CPY001", "ANN001"]
"docs/sphinx/source/conf.py" = ["INP", "CPY001"]
"example.py" = ["T201", "CPY001"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
split-on-trailing-comma = false

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -vv"
testpaths = ["tests"]
